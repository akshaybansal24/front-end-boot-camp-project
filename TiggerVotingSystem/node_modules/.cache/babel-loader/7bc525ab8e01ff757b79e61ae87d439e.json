{"ast":null,"code":"import { ADD_ACTION, SUBTRACT_ACTION, MULTIPLY_ACTION, DIVIDE_ACTION, CLEAR_ACTION, DELETE_HISTORY } from '../actions/calcToolActions';\n\nconst resultReducer = (result = 0, action) => {\n  switch (action.type) {\n    case ADD_ACTION:\n      return result + action.payload.value;\n\n    case SUBTRACT_ACTION:\n      return result - action.payload.value;\n\n    case MULTIPLY_ACTION:\n      return result * action.payload.value;\n\n    case DIVIDE_ACTION:\n      if (action.payload.value === 0) {\n        console.log(\"here\");\n        return { ...state,\n          errorMessage: 'Divide By 0 is not allowed'\n        };\n      } else {\n        return { ...state,\n          errorMessage: '',\n          result: state.result / action.payload.value,\n          history: [...state.history, {\n            id: Math.max(...state.history.map(item => item.id), 0) + 1,\n            value: action.payload.value,\n            type: DIVIDE_ACTION\n          }]\n        };\n      }\n\n    case CLEAR_ACTION:\n      return 0;\n\n    default:\n      return result;\n  }\n};\n\nconst historyReducer = (history = [], action) => {\n  if ([ADD_ACTION, SUBTRACT_ACTION, MULTIPLY_ACTION, DIVIDE_ACTION].includes(action.type)) {\n    return [...state.history, {\n      id: Math.max(...state.history.map(item => item.id), 0) + 1,\n      value: action.payload.value,\n      type: MULTIPLY_ACTION\n    }];\n  }\n};\n\nexport const calcToolReducer = (state = {\n  result: 0,\n  history: [],\n  errorMessage: ''\n}, action) => {\n  return { ...state,\n    result: resultReducer(state.result, action),\n    history: historyReducer(state.history, action)\n  };\n};","map":{"version":3,"sources":["/app/Front-end-bootcamp/demo-app/src/reducers/calToolReducers.js"],"names":["ADD_ACTION","SUBTRACT_ACTION","MULTIPLY_ACTION","DIVIDE_ACTION","CLEAR_ACTION","DELETE_HISTORY","resultReducer","result","action","type","payload","value","console","log","state","errorMessage","history","id","Math","max","map","item","historyReducer","includes","calcToolReducer"],"mappings":"AAAA,SAASA,UAAT,EACQC,eADR,EAEQC,eAFR,EAGQC,aAHR,EAIQC,YAJR,EAKQC,cALR,QAK8B,4BAL9B;;AAOA,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAC,CAAR,EAAWC,MAAX,KAAsB;AAExC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,UAAL;AACI,aAAOO,MAAM,GAAGC,MAAM,CAACE,OAAP,CAAeC,KAA/B;;AACJ,SAAKV,eAAL;AACI,aAAOM,MAAM,GAAGC,MAAM,CAACE,OAAP,CAAeC,KAA/B;;AACJ,SAAKT,eAAL;AACI,aAAOK,MAAM,GAAGC,MAAM,CAACE,OAAP,CAAeC,KAA/B;;AACJ,SAAKR,aAAL;AACI,UAAGK,MAAM,CAACE,OAAP,CAAeC,KAAf,KAAyB,CAA5B,EAA8B;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAO,EACH,GAAGC,KADA;AAEHC,UAAAA,YAAY,EAAE;AAFX,SAAP;AAIH,OAND,MAMK;AACD,eAAO,EACH,GAAGD,KADA;AAEHC,UAAAA,YAAY,EAAE,EAFX;AAGHR,UAAAA,MAAM,EAAEO,KAAK,CAACP,MAAN,GAAeC,MAAM,CAACE,OAAP,CAAeC,KAHnC;AAIHK,UAAAA,OAAO,EAAE,CAAC,GAAGF,KAAK,CAACE,OAAV,EAAkB;AACvBC,YAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,CAAS,GAAGL,KAAK,CAACE,OAAN,CAAcI,GAAd,CAAkBC,IAAI,IAAIA,IAAI,CAACJ,EAA/B,CAAZ,EAAiD,CAAjD,IAAsD,CADnC;AAEvBN,YAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC,KAFC;AAGvBF,YAAAA,IAAI,EAAEN;AAHiB,WAAlB;AAJN,SAAP;AAUH;;AACL,SAAKC,YAAL;AACI,aAAO,CAAP;;AACJ;AACI,aAAOG,MAAP;AA7BR;AA+BH,CAjCD;;AAmCA,MAAMe,cAAc,GAAG,CAACN,OAAO,GAAE,EAAV,EAAeR,MAAf,KAA0B;AAC7C,MAAG,CAACR,UAAD,EAAYC,eAAZ,EAA4BC,eAA5B,EAA4CC,aAA5C,EAA2DoB,QAA3D,CAAoEf,MAAM,CAACC,IAA3E,CAAH,EAAoF;AAChF,WAAO,CAAC,GAAGK,KAAK,CAACE,OAAV,EAAkB;AACrBC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,CAAS,GAAGL,KAAK,CAACE,OAAN,CAAcI,GAAd,CAAkBC,IAAI,IAAIA,IAAI,CAACJ,EAA/B,CAAZ,EAAiD,CAAjD,IAAsD,CADrC;AAErBN,MAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC,KAFD;AAGrBF,MAAAA,IAAI,EAAEP;AAHe,KAAlB,CAAP;AAKH;AACJ,CARD;;AASA,OAAO,MAAMsB,eAAe,GAAG,CAACV,KAAK,GAAG;AACJP,EAAAA,MAAM,EAAC,CADH;AAEJS,EAAAA,OAAO,EAAE,EAFL;AAGJD,EAAAA,YAAY,EAAE;AAHV,CAAT,EAIIP,MAJJ,KAIe;AAE1C,SAAO,EACH,GAAGM,KADA;AAEHP,IAAAA,MAAM,EAAED,aAAa,CAACQ,KAAK,CAACP,MAAP,EAAeC,MAAf,CAFlB;AAGHQ,IAAAA,OAAO,EAAEM,cAAc,CAAER,KAAK,CAACE,OAAR,EAAiBR,MAAjB;AAHpB,GAAP;AAKH,CAXM","sourcesContent":["import { ADD_ACTION, \n        SUBTRACT_ACTION,\n        MULTIPLY_ACTION, \n        DIVIDE_ACTION, \n        CLEAR_ACTION,\n        DELETE_HISTORY } from '../actions/calcToolActions';\n\nconst resultReducer = (result=0, action) => {\n\n    switch(action.type){\n        case ADD_ACTION:\n            return result + action.payload.value;\n        case SUBTRACT_ACTION:\n            return result - action.payload.value;\n        case MULTIPLY_ACTION:\n            return result * action.payload.value;\n        case DIVIDE_ACTION:\n            if(action.payload.value === 0){\n                console.log(\"here\");\n                return {\n                    ...state,\n                    errorMessage: 'Divide By 0 is not allowed',\n                };\n            }else{\n                return {\n                    ...state,\n                    errorMessage: '',\n                    result: state.result / action.payload.value,\n                    history: [...state.history,{\n                        id: Math.max(...state.history.map(item => item.id) , 0) + 1,\n                        value: action.payload.value,\n                        type: DIVIDE_ACTION\n                    }]\n                };\n            }\n        case CLEAR_ACTION:\n            return 0;\n        default:\n            return result;\n    }\n}\n\nconst historyReducer = (history =[] , action) => {\n    if([ADD_ACTION,SUBTRACT_ACTION,MULTIPLY_ACTION,DIVIDE_ACTION].includes(action.type)){\n        return [...state.history,{\n            id: Math.max(...state.history.map(item => item.id) , 0) + 1,\n            value: action.payload.value,\n            type: MULTIPLY_ACTION\n        }];\n    }\n}\nexport const calcToolReducer = (state = {\n                                    result:0,\n                                    history: [],\n                                    errorMessage: ''\n                                }, action) => {\n    \n    return {\n        ...state,\n        result: resultReducer(state.result, action),\n        history: historyReducer( state.history, action)\n    }\n};"]},"metadata":{},"sourceType":"module"}