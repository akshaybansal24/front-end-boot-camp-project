{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { createAddCarAction, createDeleteCarAction, createEditCarAction, createSortCarAction, createSaveCarAction } from '../actions/carToolActions'; // export const useCarToolStore = initialCars => {\n//     const [ editCarId, setEditCarId ] = useState(-1);\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nconst sortItems = (unsortedItems, sortCol, sortDir) => {\n  const items = [...unsortedItems];\n  return items.sort((a, b) => {\n    if (a[sortCol] > b[sortCol]) {\n      if (sortDir === '') //SORT_ASC\n        return 1;else return -1;\n    } else if (a[sortCol] < b[sortCol]) {\n      if (sortDir === '') //SORT_ASC\n        return -1;else return 1;\n    } else return 0;\n  });\n};\n\nexport const useCarToolStore = () => {\n  _s();\n\n  const cars = useSelector(state => state.cars);\n  const sortCol = useSelector(state => state.sortCol);\n  const sortDir = useSelector(state => state.sortDir);\n  const editCarId = useSelector(state => state.editCarId);\n  sortItems(cars, sortCol, sortDir);\n  const dispatch = useDispatch();\n  const boundActions = bindActionCreators({\n    addCar: createAddCarAction,\n    deleteCar: createDeleteCarAction,\n    editCar: createEditCarAction,\n    sortCar: createSortCarAction,\n    saveCar: createSaveCarAction\n  }, dispatch);\n  return {\n    cars,\n    sortCol,\n    sortDir,\n    editCarId,\n    ...boundActions\n  };\n};\n\n_s(useCarToolStore, \"96u3AJibyigIXQrZVBQ0IZ3yI8o=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});","map":{"version":3,"sources":["/app/Front-end-bootcamp/demo-app/src/hooks/useCarToolStore.js"],"names":["useDispatch","useSelector","bindActionCreators","createAddCarAction","createDeleteCarAction","createEditCarAction","createSortCarAction","createSaveCarAction","sortItems","unsortedItems","sortCol","sortDir","items","sort","a","b","useCarToolStore","cars","state","editCarId","dispatch","boundActions","addCar","deleteCar","editCar","sortCar","saveCar"],"mappings":";;AAAA;AACA;AAEA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACIC,kBADJ,EAEIC,qBAFJ,EAGIC,mBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,QAMO,2BANP,C,CAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAACC,aAAD,EAAgBC,OAAhB,EAAyBC,OAAzB,KAAqC;AAEnD,QAAMC,KAAK,GAAG,CAAC,GAAGH,aAAJ,CAAd;AAEA,SAAOG,KAAK,CAACC,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAAS;AACvB,QAAGD,CAAC,CAACJ,OAAD,CAAD,GAAaK,CAAC,CAACL,OAAD,CAAjB,EAA2B;AACvB,UAAGC,OAAO,KAAK,EAAf,EAAmB;AACf,eAAO,CAAP,CADJ,KAGI,OAAO,CAAC,CAAR;AACP,KALD,MAMK,IAAGG,CAAC,CAACJ,OAAD,CAAD,GAAaK,CAAC,CAACL,OAAD,CAAjB,EAA2B;AAC5B,UAAGC,OAAO,KAAK,EAAf,EAAmB;AACf,eAAO,CAAC,CAAR,CADJ,KAGI,OAAO,CAAP;AACP,KALI,MAOD,OAAO,CAAP;AACP,GAfM,CAAP;AAgBH,CApBD;;AAsBA,OAAO,MAAMK,eAAe,GAAG,MAAM;AAAA;;AAEjC,QAAMC,IAAI,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAMP,OAAO,GAAGT,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACR,OAAhB,CAA3B;AACA,QAAMC,OAAO,GAAGV,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACP,OAAhB,CAA3B;AACA,QAAMQ,SAAS,GAAGlB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,SAAhB,CAA7B;AAEAX,EAAAA,SAAS,CAACS,IAAD,EAAOP,OAAP,EAAgBC,OAAhB,CAAT;AAEA,QAAMS,QAAQ,GAAGpB,WAAW,EAA5B;AAEA,QAAMqB,YAAY,GAAGnB,kBAAkB,CAAC;AACpCoB,IAAAA,MAAM,EAAEnB,kBAD4B;AAEpCoB,IAAAA,SAAS,EAAEnB,qBAFyB;AAGpCoB,IAAAA,OAAO,EAAEnB,mBAH2B;AAIpCoB,IAAAA,OAAO,EAAEnB,mBAJ2B;AAKpCoB,IAAAA,OAAO,EAAEnB;AAL2B,GAAD,EAMpCa,QANoC,CAAvC;AAQA,SAAO;AACHH,IAAAA,IADG;AAEHP,IAAAA,OAFG;AAGHC,IAAAA,OAHG;AAIHQ,IAAAA,SAJG;AAKH,OAAGE;AALA,GAAP;AAOH,CA1BM;;GAAML,e;UAEIf,W,EACGA,W,EACAA,W,EACEA,W,EAIDD,W","sourcesContent":["// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\n\nimport  {useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n    createAddCarAction,\n    createDeleteCarAction,\n    createEditCarAction,\n    createSortCarAction,\n    createSaveCarAction,\n} from '../actions/carToolActions';\n\n// export const useCarToolStore = initialCars => {\n\n//     const [ editCarId, setEditCarId ] = useState(-1);\n\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n    \n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nconst sortItems = (unsortedItems, sortCol, sortDir) => {\n\n    const items = [...unsortedItems];\n\n    return items.sort((a,b) => {\n        if(a[sortCol] > b[sortCol]){\n            if(sortDir === '') //SORT_ASC\n                return 1;\n            else\n                return -1;\n        }\n        else if(a[sortCol] < b[sortCol]){\n            if(sortDir === '') //SORT_ASC\n                return -1;\n            else\n                return 1;\n        }\n        else\n            return 0;\n    });\n}\n\nexport const useCarToolStore = () => {\n\n    const cars = useSelector(state => state.cars);\n    const sortCol = useSelector(state => state.sortCol);\n    const sortDir = useSelector(state => state.sortDir);\n    const editCarId = useSelector(state => state.editCarId);\n\n    sortItems(cars, sortCol, sortDir);\n\n    const dispatch = useDispatch();\n\n    const boundActions = bindActionCreators({\n        addCar: createAddCarAction,\n        deleteCar: createDeleteCarAction,\n        editCar: createEditCarAction,\n        sortCar: createSortCarAction,\n        saveCar: createSaveCarAction\n    }, dispatch);\n\n    return {\n        cars,\n        sortCol,\n        sortDir,\n        editCarId,\n        ...boundActions\n    };\n};"]},"metadata":{},"sourceType":"module"}