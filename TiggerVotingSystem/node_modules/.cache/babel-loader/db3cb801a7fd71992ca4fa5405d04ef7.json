{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList.js';\n// export const useColorToolStore = initialColors => {\n//     const [ \n//         colors, \n//         addColor, removeColor, ,\n//         sortCol, setSortCol,\n//         sortDirection, setSortDirection\n//     ] = useSortedList([...initialColors], 'id', SORT_ASC);\n//     const updateSortColor = () => {\n//         if(sortCol === 'id'){\n//             setSortCol('name');\n//             setSortDirection(SORT_ASC);\n//         }\n//         else if(sortCol === 'name' && sortDirection === SORT_ASC){\n//             setSortDirection(SORT_DESC);\n//         }\n//         else{\n//             setSortCol('id');\n//             setSortDirection(SORT_ASC);\n//         }\n//     };\n//     return {\n//         colors, addColor, removeColor, sortCol, sortDirection, updateSortColor\n//     };\n// }\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { createSortColorAction, refreshColors, addColor, deleteColor } from '../actions/colorToolActions';\nimport { sortedColorsSelector } from '../selectors/colorToolSelectors';\nexport const useColorToolStore = () => {\n  _s();\n\n  const colors = useSelector(sortedColorsSelector);\n  const colorsSort = useSelector(state => state.colorsSort);\n  const dispatch = useDispatch();\n  const boundActions = useMemo(() => bindActionCreators({\n    refreshColors,\n    addColor,\n    deleteColor,\n    sortColor: createSortColorAction\n  }, dispatch), [dispatch]);\n  useEffect(() => {\n    boundActions.refreshColors();\n  }, [boundActions]); //const sortedColors = sortColors(colors, sortDir);\n\n  console.log(\"Colors to render\");\n  console.log(colors);\n  return {\n    colors,\n    colorsSort,\n    ...boundActions\n  };\n};\n\n_s(useColorToolStore, \"XYykjPmDhiSYscnDvfcW3XapCbU=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});","map":{"version":3,"sources":["/app/Front-end-bootcamp/front-end-boot-camp-project/TiggerVotingSystem/src/hooks/useColorToolStore.js"],"names":["useEffect","useMemo","useDispatch","useSelector","bindActionCreators","createSortColorAction","refreshColors","addColor","deleteColor","sortedColorsSelector","useColorToolStore","colors","colorsSort","state","dispatch","boundActions","sortColor","console","log"],"mappings":";;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACIC,qBADJ,EAEIC,aAFJ,EAGIC,QAHJ,EAIIC,WAJJ,QAKO,6BALP;AAMA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAEnC,QAAMC,MAAM,GAAGR,WAAW,CAACM,oBAAD,CAA1B;AACA,QAAMG,UAAU,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AAEA,QAAME,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,YAAY,GAAGd,OAAO,CAAC,MAAMG,kBAAkB,CAAC;AAClDE,IAAAA,aADkD;AAElDC,IAAAA,QAFkD;AAGlDC,IAAAA,WAHkD;AAIlDQ,IAAAA,SAAS,EAAEX;AAJuC,GAAD,EAKlDS,QALkD,CAAzB,EAKd,CAACA,QAAD,CALc,CAA5B;AAOAd,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,YAAY,CAACT,aAAb;AACH,GAFQ,EAEN,CAACS,YAAD,CAFM,CAAT,CAdmC,CAkBnC;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AAEA,SAAO;AACHA,IAAAA,MADG;AAEHC,IAAAA,UAFG;AAGH,OAAGG;AAHA,GAAP;AAMH,CA5BM;;GAAML,iB;UAEMP,W,EACIA,W,EAEFD,W","sourcesContent":["// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList.js';\n\n// export const useColorToolStore = initialColors => {\n\n//     const [ \n//         colors, \n//         addColor, removeColor, ,\n//         sortCol, setSortCol,\n//         sortDirection, setSortDirection\n//     ] = useSortedList([...initialColors], 'id', SORT_ASC);\n\n//     const updateSortColor = () => {\n//         if(sortCol === 'id'){\n//             setSortCol('name');\n//             setSortDirection(SORT_ASC);\n//         }\n//         else if(sortCol === 'name' && sortDirection === SORT_ASC){\n//             setSortDirection(SORT_DESC);\n//         }\n//         else{\n//             setSortCol('id');\n//             setSortDirection(SORT_ASC);\n//         }\n//     };\n\n//     return {\n//         colors, addColor, removeColor, sortCol, sortDirection, updateSortColor\n//     };\n// }\n \nimport { useEffect, useMemo } from 'react';\nimport  {useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n    createSortColorAction,\n    refreshColors,\n    addColor,\n    deleteColor\n} from '../actions/colorToolActions';\nimport { sortedColorsSelector } from '../selectors/colorToolSelectors';\n\nexport const useColorToolStore = () => {\n\n    const colors = useSelector(sortedColorsSelector);\n    const colorsSort = useSelector(state => state.colorsSort);\n\n    const dispatch = useDispatch();\n\n    const boundActions = useMemo(() => bindActionCreators({\n        refreshColors,\n        addColor,\n        deleteColor,\n        sortColor: createSortColorAction\n    }, dispatch), [dispatch]);\n\n    useEffect(() => {\n        boundActions.refreshColors();\n    }, [boundActions]);\n\n    //const sortedColors = sortColors(colors, sortDir);\n    console.log(\"Colors to render\")\n    console.log(colors);\n\n    return {\n        colors,\n        colorsSort,\n        ...boundActions\n    };\n\n};"]},"metadata":{},"sourceType":"module"}