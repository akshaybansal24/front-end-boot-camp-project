{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { createAddCarAction, createDeleteCarAction, createEditCarAction, createSortCarAction } from '../actions/carToolActions'; // export const useCarToolStore = initialCars => {\n//     const [ editCarId, setEditCarId ] = useState(-1);\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nexport const useCarToolStore = () => {\n  _s();\n\n  const cars = useSelector(state.cars);\n  const sortCol = useSelector(state.sortCol);\n  const sortDir = useSelector(state.sortDir);\n  const dispatch = useDispatch();\n  const boundActions = bindActionCreators({\n    addCar: createAddCarAction,\n    deleteCar: createDeleteCarAction,\n    editCar: createEditCarAction,\n    sortCar: createSortCarAction\n  }, dispatch);\n  return {\n    cars,\n    sortCol,\n    sortDir,\n    ...boundActions\n  };\n};\n\n_s(useCarToolStore, \"NQeu9zqr9/p16SrskN4ZhSnznRs=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});","map":{"version":3,"sources":["/app/Front-end-bootcamp/demo-app/src/hooks/useCarToolStore.js"],"names":["useDispatch","useSelector","bindActionCreators","createAddCarAction","createDeleteCarAction","createEditCarAction","createSortCarAction","useCarToolStore","cars","state","sortCol","sortDir","dispatch","boundActions","addCar","deleteCar","editCar","sortCar"],"mappings":";;AAAA;AACA;AAEA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACIC,kBADJ,EAEIC,qBAFJ,EAGIC,mBAHJ,EAIIC,mBAJJ,QAKO,2BALP,C,CAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAEjC,QAAMC,IAAI,GAAGP,WAAW,CAACQ,KAAK,CAACD,IAAP,CAAxB;AACA,QAAME,OAAO,GAAGT,WAAW,CAACQ,KAAK,CAACC,OAAP,CAA3B;AACA,QAAMC,OAAO,GAAGV,WAAW,CAACQ,KAAK,CAACE,OAAP,CAA3B;AAEA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,YAAY,GAAGX,kBAAkB,CAAC;AACpCY,IAAAA,MAAM,EAAEX,kBAD4B;AAEpCY,IAAAA,SAAS,EAAEX,qBAFyB;AAGpCY,IAAAA,OAAO,EAAEX,mBAH2B;AAIpCY,IAAAA,OAAO,EAAEX;AAJ2B,GAAD,EAKpCM,QALoC,CAAvC;AAOA,SAAO;AACHJ,IAAAA,IADG;AAEHE,IAAAA,OAFG;AAGHC,IAAAA,OAHG;AAIH,OAAGE;AAJA,GAAP;AAMH,CArBM;;GAAMN,e;UAEIN,W,EACGA,W,EACAA,W,EAECD,W","sourcesContent":["// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\n\nimport  {useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n    createAddCarAction,\n    createDeleteCarAction,\n    createEditCarAction,\n    createSortCarAction\n} from '../actions/carToolActions';\n\n// export const useCarToolStore = initialCars => {\n\n//     const [ editCarId, setEditCarId ] = useState(-1);\n\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n    \n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nexport const useCarToolStore = () => {\n\n    const cars = useSelector(state.cars);\n    const sortCol = useSelector(state.sortCol);\n    const sortDir = useSelector(state.sortDir);\n\n    const dispatch = useDispatch();\n\n    const boundActions = bindActionCreators({\n        addCar: createAddCarAction,\n        deleteCar: createDeleteCarAction,\n        editCar: createEditCarAction,\n        sortCar: createSortCarAction,\n    }, dispatch);\n\n    return {\n        cars,\n        sortCol,\n        sortDir,\n        ...boundActions\n    };\n};"]},"metadata":{},"sourceType":"module"}