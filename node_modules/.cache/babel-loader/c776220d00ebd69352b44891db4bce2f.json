{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList.js';\n// export const useColorToolStore = initialColors => {\n//     const [ \n//         colors, \n//         addColor, removeColor, ,\n//         sortCol, setSortCol,\n//         sortDirection, setSortDirection\n//     ] = useSortedList([...initialColors], 'id', SORT_ASC);\n//     const updateSortColor = () => {\n//         if(sortCol === 'id'){\n//             setSortCol('name');\n//             setSortDirection(SORT_ASC);\n//         }\n//         else if(sortCol === 'name' && sortDirection === SORT_ASC){\n//             setSortDirection(SORT_DESC);\n//         }\n//         else{\n//             setSortCol('id');\n//             setSortDirection(SORT_ASC);\n//         }\n//     };\n//     return {\n//         colors, addColor, removeColor, sortCol, sortDirection, updateSortColor\n//     };\n// }\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { createAddColorAction, createDeleteColorAction, createSortColorAction } from '../actions/colorToolActions';\nimport { colorToolSelector } from '../selectors/colorToolSelectors';\n\nconst sortColors = (unsortedItems, sortDir) => {\n  const items = [...unsortedItems];\n  return items.sort((a, b) => {\n    if (a['id'] > b['id']) {\n      if (sortDir === 'Ascending') //SORT_ASC\n        return 1;else return -1;\n    } else if (a['id'] < b['id']) {\n      if (sortDir === 'Ascending') //SORT_ASC\n        return -1;else return 1;\n    } else return 0;\n  });\n};\n\nexport const useColorToolStore = () => {\n  _s();\n\n  const colors = useSelector(state => state.colors);\n  const sortDir = useSelector(state => state.sortDir);\n  const dispatch = useDispatch();\n  const boundActions = bindActionCreators({\n    addColor: createAddColorAction,\n    deleteColor: createDeleteColorAction,\n    sortColor: createSortColorAction\n  }, dispatch);\n  const sortedColors = sortColors(colors, sortDir);\n  console.log(sortedColors);\n  return {\n    sortedColors,\n    sortDir,\n    ...boundActions\n  };\n};\n\n_s(useColorToolStore, \"ZpxeIFpwjjn4mJThdOlr8cy6B9U=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});","map":{"version":3,"sources":["/app/Front-end-bootcamp/demo-app/src/hooks/useColorToolStore.js"],"names":["useDispatch","useSelector","bindActionCreators","createAddColorAction","createDeleteColorAction","createSortColorAction","colorToolSelector","sortColors","unsortedItems","sortDir","items","sort","a","b","useColorToolStore","colors","state","dispatch","boundActions","addColor","deleteColor","sortColor","sortedColors","console","log"],"mappings":";;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACIC,oBADJ,EAEIC,uBAFJ,EAGIC,qBAHJ,QAIO,6BAJP;AAKA,SAASC,iBAAT,QAAkC,iCAAlC;;AAEA,MAAMC,UAAU,GAAG,CAACC,aAAD,EAAgBC,OAAhB,KAA4B;AAC3C,QAAMC,KAAK,GAAG,CAAC,GAAGF,aAAJ,CAAd;AACA,SAAOE,KAAK,CAACC,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAAS;AACvB,QAAGD,CAAC,CAAC,IAAD,CAAD,GAAUC,CAAC,CAAC,IAAD,CAAd,EAAqB;AACjB,UAAGJ,OAAO,KAAK,WAAf,EAA4B;AACxB,eAAO,CAAP,CADJ,KAGI,OAAO,CAAC,CAAR;AACP,KALD,MAMK,IAAGG,CAAC,CAAC,IAAD,CAAD,GAAUC,CAAC,CAAC,IAAD,CAAd,EAAqB;AACtB,UAAGJ,OAAO,KAAK,WAAf,EAA4B;AACxB,eAAO,CAAC,CAAR,CADJ,KAGI,OAAO,CAAP;AACP,KALI,MAOD,OAAO,CAAP;AACP,GAfM,CAAP;AAgBH,CAlBD;;AAoBA,OAAO,MAAMK,iBAAiB,GAAG,MAAM;AAAA;;AACnC,QAAMC,MAAM,GAAGd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACD,MAAhB,CAA1B;AACA,QAAMN,OAAO,GAAGR,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACP,OAAhB,CAA3B;AAEA,QAAMQ,QAAQ,GAAGjB,WAAW,EAA5B;AAEA,QAAMkB,YAAY,GAAGhB,kBAAkB,CAAC;AACpCiB,IAAAA,QAAQ,EAAEhB,oBAD0B;AAEpCiB,IAAAA,WAAW,EAAEhB,uBAFuB;AAGpCiB,IAAAA,SAAS,EAAEhB;AAHyB,GAAD,EAIpCY,QAJoC,CAAvC;AAMA,QAAMK,YAAY,GAAGf,UAAU,CAACQ,MAAD,EAASN,OAAT,CAA/B;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEA,SAAO;AACHA,IAAAA,YADG;AAEHb,IAAAA,OAFG;AAGH,OAAGS;AAHA,GAAP;AAMH,CArBM;;GAAMJ,iB;UACMb,W,EACCA,W,EAECD,W","sourcesContent":["// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList.js';\n\n// export const useColorToolStore = initialColors => {\n\n//     const [ \n//         colors, \n//         addColor, removeColor, ,\n//         sortCol, setSortCol,\n//         sortDirection, setSortDirection\n//     ] = useSortedList([...initialColors], 'id', SORT_ASC);\n\n//     const updateSortColor = () => {\n//         if(sortCol === 'id'){\n//             setSortCol('name');\n//             setSortDirection(SORT_ASC);\n//         }\n//         else if(sortCol === 'name' && sortDirection === SORT_ASC){\n//             setSortDirection(SORT_DESC);\n//         }\n//         else{\n//             setSortCol('id');\n//             setSortDirection(SORT_ASC);\n//         }\n//     };\n\n//     return {\n//         colors, addColor, removeColor, sortCol, sortDirection, updateSortColor\n//     };\n// }\n\nimport  {useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n    createAddColorAction,\n    createDeleteColorAction,\n    createSortColorAction\n} from '../actions/colorToolActions';\nimport { colorToolSelector } from '../selectors/colorToolSelectors';\n\nconst sortColors = (unsortedItems, sortDir) => {\n    const items = [...unsortedItems];\n    return items.sort((a,b) => {\n        if(a['id'] > b['id']){\n            if(sortDir === 'Ascending') //SORT_ASC\n                return 1;\n            else\n                return -1;\n        }\n        else if(a['id'] < b['id']){\n            if(sortDir === 'Ascending') //SORT_ASC\n                return -1;\n            else\n                return 1;\n        }\n        else\n            return 0;\n    });\n}\n\nexport const useColorToolStore = () => {\n    const colors = useSelector(state => state.colors);\n    const sortDir = useSelector(state => state.sortDir);\n\n    const dispatch = useDispatch();\n\n    const boundActions = bindActionCreators({\n        addColor: createAddColorAction,\n        deleteColor: createDeleteColorAction,\n        sortColor: createSortColorAction\n    }, dispatch);\n\n    const sortedColors = sortColors(colors, sortDir);\n    console.log(sortedColors);\n\n    return {\n        sortedColors,\n        sortDir,\n        ...boundActions\n    };\n\n};"]},"metadata":{},"sourceType":"module"}