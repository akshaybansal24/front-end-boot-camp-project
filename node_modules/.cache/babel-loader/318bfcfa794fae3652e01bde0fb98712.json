{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addCar, deleteCar, createDeleteCarAction, createEditCarAction, createSortCarAction, createSaveCarAction, refreshCars } from '../actions/carToolActions';\nimport { sortedCarsSelector } from '../selectors/carToolSelectors'; // export const useCarToolStore = initialCars => {\n//     const [ editCarId, setEditCarId ] = useState(-1);\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nexport const useCarToolStore = () => {\n  _s();\n\n  const cars = useSelector(sortedCarsSelector);\n  const carsSort = useSelector(state => state.carsSort);\n  const editCarId = useSelector(state => state.editCarId);\n  const dispatch = useDispatch();\n  const boundActions = useMemo(() => bindActionCreators({\n    refreshCars,\n    addCar,\n    deleteCar,\n    editCar: createEditCarAction,\n    sortCar: createSortCarAction,\n    saveCar: createSaveCarAction\n  }, dispatch), [dispatch]);\n  useEffect(() => {\n    boundActions.refreshCars();\n  }, [boundActions]);\n  return {\n    cars,\n    carsSort,\n    editCarId,\n    ...boundActions\n  };\n};\n\n_s(useCarToolStore, \"DsV2Icnt1c7mwG6h8g8jBcG2frs=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});","map":{"version":3,"sources":["/app/Front-end-bootcamp/demo-app/src/hooks/useCarToolStore.js"],"names":["useEffect","useMemo","useDispatch","useSelector","bindActionCreators","addCar","deleteCar","createDeleteCarAction","createEditCarAction","createSortCarAction","createSaveCarAction","refreshCars","sortedCarsSelector","useCarToolStore","cars","carsSort","state","editCarId","dispatch","boundActions","editCar","sortCar","saveCar"],"mappings":";;AAAA;AACA;AAEA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACIC,MADJ,EAEIC,SAFJ,EAGIC,qBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,EAOIC,WAPJ,QAQO,2BARP;AASA,SAASC,kBAAT,QAAmC,+BAAnC,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAEjC,QAAMC,IAAI,GAAGX,WAAW,CAACS,kBAAD,CAAxB;AACA,QAAMG,QAAQ,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACA,QAAME,SAAS,GAAGd,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,SAAhB,CAA7B;AAEA,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,QAAMiB,YAAY,GAAGlB,OAAO,CAAE,MAAMG,kBAAkB,CAAC;AACnDO,IAAAA,WADmD;AAEnDN,IAAAA,MAFmD;AAGnDC,IAAAA,SAHmD;AAInDc,IAAAA,OAAO,EAAEZ,mBAJ0C;AAKnDa,IAAAA,OAAO,EAAEZ,mBAL0C;AAMnDa,IAAAA,OAAO,EAAEZ;AAN0C,GAAD,EAOnDQ,QAPmD,CAA1B,EAOd,CAACA,QAAD,CAPc,CAA5B;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,YAAY,CAACR,WAAb;AACH,GAFQ,EAEN,CAACQ,YAAD,CAFM,CAAT;AAIA,SAAO;AACHL,IAAAA,IADG;AAEHC,IAAAA,QAFG;AAGHE,IAAAA,SAHG;AAIH,OAAGE;AAJA,GAAP;AAMH,CA3BM;;GAAMN,e;UAEIV,W,EACIA,W,EACCA,W,EAEDD,W","sourcesContent":["// import { useSortedList, SORT_ASC, SORT_DESC } from '../hooks/useSortedList';\n// import { useState } from \"react\";\n\nimport { useEffect, useMemo } from 'react';\nimport  {useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n    addCar,\n    deleteCar,\n    createDeleteCarAction,\n    createEditCarAction,\n    createSortCarAction,\n    createSaveCarAction,\n    refreshCars\n} from '../actions/carToolActions';\nimport { sortedCarsSelector } from '../selectors/carToolSelectors';\n\n// export const useCarToolStore = initialCars => {\n\n//     const [ editCarId, setEditCarId ] = useState(-1);\n\n//     const [ \n//         cars, addCarToList, deleteCarFromList, saveCarToList,\n//         sortCol, setSortCol,\n//         sortDir, setSortDir\n//     ] = useSortedList(initialCars, 'id', SORT_ASC);\n    \n//     const addCar = (newCar) =>{\n//         addCarToList(newCar);\n//         setEditCarId(-1);\n//     };\n\n//     const deleteCar = (removedCarID) => {\n//         deleteCarFromList(removedCarID);\n//         setEditCarId(-1);\n//     }\n\n//     const saveCar = (updatedCar) => {\n//         saveCarToList(updatedCar);\n//         setEditCarId(-1);\n//     }\n\n//     const updateSort = (newSortColName) => {\n//         if(sortCol === newSortColName){\n//             if(sortDir === SORT_ASC)\n//                 setSortDir(SORT_DESC);\n//             else\n//                 setSortDir(SORT_ASC);\n//         }else{\n//             setSortDir(SORT_ASC);\n//         }\n//         setSortCol(newSortColName);\n//     }\n\n//     return {\n//         cars, \n//         addCar, \n//         deleteCar, \n//         saveCar, \n//         updateSort, \n//         sortCol,\n//         sortDir,\n//         editCarId,\n//         setEditCarId\n//     }\n// }\n\nexport const useCarToolStore = () => {\n\n    const cars = useSelector(sortedCarsSelector);\n    const carsSort = useSelector(state => state.carsSort);\n    const editCarId = useSelector(state => state.editCarId);\n\n    const dispatch = useDispatch();\n\n    const boundActions = useMemo( () => bindActionCreators({\n        refreshCars,\n        addCar,\n        deleteCar,\n        editCar: createEditCarAction,\n        sortCar: createSortCarAction,\n        saveCar: createSaveCarAction\n    }, dispatch), [dispatch] );\n\n    useEffect(() => {\n        boundActions.refreshCars();\n    }, [boundActions]);\n\n    return {\n        cars,\n        carsSort,\n        editCarId,\n        ...boundActions\n    };\n};"]},"metadata":{},"sourceType":"module"}